// Code generated by kraftkit.sh/tools/protoc-gen-go-netconn. DO NOT EDIT.
// source: machine/qemu/qmp/v1alpha/run_state.proto

package qmpv1alpha

type ShutdownCause string

const (
	SHUTDOWN_NONE                  = ShutdownCause("none")
	SHUTDOWN_HOST_ERROR            = ShutdownCause("host-error")
	SHUTDOWN_HOST_QMP_QUIT         = ShutdownCause("host-qmp-quit")
	SHUTDOWN_HOST_QMP_SYSTEM_RESET = ShutdownCause("host-qmp-system-reset")
	SHUTDOWN_HOST_SIGNAL           = ShutdownCause("host-signal")
	SHUTDOWN_HOST_UI               = ShutdownCause("host-ui")
	SHUTDOWN_GUEST_SHUTDOWN        = ShutdownCause("guest-shutdown")
	SHUTDOWN_GUEST_RESET           = ShutdownCause("guest-reset")
	SHUTDOWN_GUEST_PANIC           = ShutdownCause("guest-panic")
	SHUTDOWN_SUBSYSTEM_RESET       = ShutdownCause("subsystem-reset")
)

func (e ShutdownCause) String() string {
	return string(e)
}

func ShutdownCauses() []ShutdownCause {
	return []ShutdownCause{
		SHUTDOWN_NONE,
		SHUTDOWN_HOST_ERROR,
		SHUTDOWN_HOST_QMP_QUIT,
		SHUTDOWN_HOST_QMP_SYSTEM_RESET,
		SHUTDOWN_HOST_SIGNAL,
		SHUTDOWN_HOST_UI,
		SHUTDOWN_GUEST_SHUTDOWN,
		SHUTDOWN_GUEST_RESET,
		SHUTDOWN_GUEST_PANIC,
		SHUTDOWN_SUBSYSTEM_RESET,
	}
}

type RunState string

const (
	RUN_STATE_COLO           = RunState("colo")
	RUN_STATE_DEBUG          = RunState("debug")
	RUN_STATE_FINISH_MIGRATE = RunState("finish-migrate")
	RUN_STATE_GUEST_PANICKED = RunState("guest-panicked")
	RUN_STATE_INMIGRATE      = RunState("inmigrate")
	RUN_STATE_INTERNAL_ERROR = RunState("internal-error")
	RUN_STATE_IO_ERROR       = RunState("io-error")
	RUN_STATE_PAUSED         = RunState("paused")
	RUN_STATE_POSTMIGRATE    = RunState("postmigrate")
	RUN_STATE_PRELAUNCH      = RunState("prelaunch")
	RUN_STATE_RESTORE_VM     = RunState("restore-vm")
	RUN_STATE_RUNNING        = RunState("running")
	RUN_STATE_SAVE_VM        = RunState("save-vm")
	RUN_STATE_SHUTDOWN       = RunState("shutdown")
	RUN_STATE_SUSPENDED      = RunState("suspended")
	RUN_STATE_WATCHDOG       = RunState("watchdog")
)

func (e RunState) String() string {
	return string(e)
}

func RunStates() []RunState {
	return []RunState{
		RUN_STATE_COLO,
		RUN_STATE_DEBUG,
		RUN_STATE_FINISH_MIGRATE,
		RUN_STATE_GUEST_PANICKED,
		RUN_STATE_INMIGRATE,
		RUN_STATE_INTERNAL_ERROR,
		RUN_STATE_IO_ERROR,
		RUN_STATE_PAUSED,
		RUN_STATE_POSTMIGRATE,
		RUN_STATE_PRELAUNCH,
		RUN_STATE_RESTORE_VM,
		RUN_STATE_RUNNING,
		RUN_STATE_SAVE_VM,
		RUN_STATE_SHUTDOWN,
		RUN_STATE_SUSPENDED,
		RUN_STATE_WATCHDOG,
	}
}

type QueryStatusRequest struct {
	Execute string `json:"execute" default:"query-status"`
}

type StatusInfo struct {
	Running    bool     `json:"running"`
	SingleStep bool     `json:"singlestep"`
	Status     RunState `json:"status"`
}

type QueryStatusResponse struct {
	Return StatusInfo `json:"return"`
}
