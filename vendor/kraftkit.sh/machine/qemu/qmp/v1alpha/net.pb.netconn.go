// Code generated by kraftkit.sh/tools/protoc-gen-go-netconn. DO NOT EDIT.
// source: machine/qemu/qmp/v1alpha/net.proto

package qmpv1alpha

// Available netdev drivers.
type NetClientDriver string

const (
	NET_CLIENT_DRIVER_NONE       = NetClientDriver("none")
	NET_CLIENT_DRIVER_NIC        = NetClientDriver("nic")
	NET_CLIENT_DRIVER_USER       = NetClientDriver("user")
	NET_CLIENT_DRIVER_TAP        = NetClientDriver("tap")
	NET_CLIENT_DRIVER_L2TPV3     = NetClientDriver("l2tpv3")
	NET_CLIENT_DRIVER_SOCKET     = NetClientDriver("socket")
	NET_CLIENT_DRIVER_STREAM     = NetClientDriver("stream")
	NET_CLIENT_DRIVER_DGRAM      = NetClientDriver("dgram")
	NET_CLIENT_DRIVER_VDE        = NetClientDriver("vde")
	NET_CLIENT_DRIVER_BRIDGE     = NetClientDriver("bridge")
	NET_CLIENT_DRIVER_HUBPORT    = NetClientDriver("hubport")
	NET_CLIENT_DRIVER_NETMAP     = NetClientDriver("netmap")
	NET_CLIENT_DRIVER_VHOST_USER = NetClientDriver("vhost-user")
	NET_CLIENT_DRIVER_VHOST_VDPA = NetClientDriver("vhost-vdpa")
)

func (e NetClientDriver) String() string {
	return string(e)
}

func NetClientDrivers() []NetClientDriver {
	return []NetClientDriver{
		NET_CLIENT_DRIVER_NONE,
		NET_CLIENT_DRIVER_NIC,
		NET_CLIENT_DRIVER_USER,
		NET_CLIENT_DRIVER_TAP,
		NET_CLIENT_DRIVER_L2TPV3,
		NET_CLIENT_DRIVER_SOCKET,
		NET_CLIENT_DRIVER_STREAM,
		NET_CLIENT_DRIVER_DGRAM,
		NET_CLIENT_DRIVER_VDE,
		NET_CLIENT_DRIVER_BRIDGE,
		NET_CLIENT_DRIVER_HUBPORT,
		NET_CLIENT_DRIVER_NETMAP,
		NET_CLIENT_DRIVER_VHOST_USER,
		NET_CLIENT_DRIVER_VHOST_VDPA,
	}
}

// Packets receiving state
//
// Since: 1.6
type RxState string

const (
	// filter assigned packets according to the mac-table
	RX_STATE_NORMAL = RxState("normal")
	// don't receive any assigned packet
	RX_STATE_NONE = RxState("none")
	// receive all assigned packets
	RX_STATE_ALL = RxState("all")
)

func (e RxState) String() string {
	return string(e)
}

func RxStates() []RxState {
	return []RxState{
		RX_STATE_NORMAL,
		RX_STATE_NONE,
		RX_STATE_ALL,
	}
}

type SetLinkRequest struct {
	Execute string `json:"execute" default:"set_link"`

	Arguments SetLinkRequestArguments `json:"arguments,omitempty"`
}

type SetLinkRequestArguments struct {
	Name string `json:"name"`
	Up   bool   `json:"up"`
}

// Create a new Network Interface Card.
//
// Since: 1.2
type NetLegacyNicOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// id of -netdev to connect to
	Netdev string `json:"netdev"`
	// MAC address
	Macaddr string `json:"macaddr"`
	// device model (e1000, rtl8139, virtio etc.)
	Model string `json:"model"`
	// PCI device address
	Addr string `json:"addr"`
	// number of MSI-x vectors, 0 to disable MSI-X
	Vectors uint32 `json:"vectors"`
}

// Use the user mode network stack which requires no administrator privilege to
// run.
//
// Since: 1.2
type NetdevUserOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// client hostname reported by the builtin DHCP server
	Hostname string `json:"hostname"`
	// isolate the guest from the host
	Restrict bool `json:"restrict"`
	// whether to support IPv4, default true for enabled (since 2.6)
	Ipv4 bool `json:"ipv4"`
	// whether to support IPv6, default true for enabled (since 2.6)
	Ipv6 bool `json:"ipv6"`
	// legacy parameter, use net= instead
	Ip string `json:"ip"`
	// IP network address that the guest will see, in the form addr[/netmask] The
	// netmask is optional, and can be either in the form a.b.c.d or as a number
	// of valid top-most bits. Default is 10.0.2.0/24.
	Net string `json:"net"`
	// guest-visible address of the host
	Host string `json:"host"`
	// root directory of the built-in TFTP server
	Tftp string `json:"tftp"`
	// BOOTP filename, for use with tftp=
	Bootfile string `json:"bootfile"`
	// the first of the 16 IPs the built-in DHCP server can assign
	Dhcpstart string `json:"dhcpstart"`
	// guest-visible address of the virtual nameserver
	Dns string `json:"dns"`
	// list of DNS suffixes to search, passed as DHCP option to the guest
	Dnssearch string `json:"dnssearch"`
	// guest-visible domain name of the virtual nameserver (since 3.0)
	Domainname string `json:"domainname"`
	// IPv6 network prefix (default is fec0::) (since 2.6). The network prefix is
	// given in the usual hexadecimal IPv6 address notation.
	Ipv6Prefix string `json:"ipv6-prefix"`
	// IPv6 network prefix length (default is 64) (since 2.6)
	Ipv6Prefixlen int64 `json:"ipv6-prefixlen"`
	// guest-visible IPv6 address of the host (since 2.6)
	Ipv6Host string `json:"ipv6-host"`
	// guest-visible IPv6 address of the virtual nameserver (since 2.6)
	Ipv6Dns string `json:"ipv6-dns"`
	// root directory of the built-in SMB server
	Smb string `json:"smb"`
	// IP address of the built-in SMB server
	Smbserver string `json:"smbserver"`
	// redirect incoming TCP or UDP host connections to guest endpoints
	Hostfwd string `json:"hostfwd"`
	// forward guest TCP connections
	Guestfwd string `json:"guestfwd"`
	// RFC2132 "TFTP server name" string (Since 3.1)
	TftpServerName string `json:"tftp-server-name"`
}

// Used to configure a host TAP network interface backend.
//
// Since: 1.2
type NetdevTapOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// interface name
	Ifname string `json:"ifname"`
	// file descriptor of an already opened tap
	Fd string `json:"fd"`
	// multiple file descriptors of already opened multiqueue capable tap
	Fds string `json:"fds"`
	// script to initialize the interface
	Script string `json:"script"`
	// script to shut down the interface
	Downscript string `json:"downscript"`
	// bridge name (since 2.8)
	Br string `json:"br"`
	// command to execute to configure bridge
	Helper string `json:"helper"`
	// send buffer limit. Understands [TGMKkb] suffixes.
	Sndbuf uint64 `json:"sndbuf"`
	// enable the IFF_VNET_HDR flag on the tap interface
	VnetHdr bool `json:"vnet_hdr"`
	// enable vhost-net network accelerator
	Vhost bool `json:"vhost"`
	// file descriptor of an already opened vhost net device
	Vhostfd string `json:"vhostfd"`
	// file descriptors of multiple already opened vhost net devices
	Vhostfds string `json:"vhostfds"`
	// vhost on for non-MSIX virtio guests
	Vhostforce bool `json:"vhostforce"`
	// number of queues to be created for multiqueue capable tap
	Queues uint32 `json:"queues"`
	// maximum number of microseconds that could be spent on busy polling for tap
	// (since 2.7)
	PollUs uint32 `json:"poll-us"`
}

// Configure an Ethernet over L2TPv3 tunnel.
//
// Since: 2.1
type NetdevL2TPv3Options struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// source address
	Src string `json:"src"`
	// destination address
	Dst string `json:"dst"`
	// source port - mandatory for udp, optional for ip
	Srcport string `json:"srcport"`
	// destination port - mandatory for udp, optional for ip
	Dstport string `json:"dstport"`
	// force the use of ipv6
	Ipv6 bool `json:"ipv6"`
	// use the udp version of l2tpv3 encapsulation
	Udp bool `json:"udp"`
	// use 64 bit cookies
	Cookie64 bool `json:"cookie64"`
	// have sequence counter
	Counter bool `json:"counter"`
	// pin sequence counter to zero - workaround for buggy implementations or
	// networks with packet reorder
	Pincounter bool `json:"pincounter"`
	// 32 or 64 bit transmit cookie
	Txcookie uint64 `json:"txcookie"`
	// 32 or 64 bit receive cookie
	Rxcookie uint64 `json:"rxcookie"`
	// 32 bit transmit session
	Txsession uint32 `json:"txsession"`
	// 32 bit receive session - if not specified set to the same value as transmit
	Rxsession uint32 `json:"rxsession"`
	// additional offset - allows the insertion of additional application-specific
	// data before the packet payload
	Offset uint32 `json:"offset"`
}

// Socket netdevs are used to establish a network connection to another QEMU
// virtual machine via a TCP socket.
//
// Since: 1.2
type NetdevSocketOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// file descriptor of an already opened socket
	Fd string `json:"fd"`
	// port number, and optional hostname, to listen on
	Listen string `json:"listen"`
	// port number, and optional hostname, to connect to
	Connect string `json:"connect"`
	// UDP multicast address and port number
	Mcast string `json:"mcast"`
	// source address and port for multicast and udp packets
	Localaddr string `json:"localaddr"`
	// UDP unicast address and port number
	Udp string `json:"udp"`
}

// Configuration info for stream socket netdev
//
// Only SocketAddress types 'unix', 'inet' and 'fd' are supported.
//
// Since: 7.2
type NetdevStreamOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// socket address to listen on (server=true) or connect to (server=false)
	Addr SocketAddress `json:"addr"`
	// create server socket (default: false)
	Server bool `json:"server"`
}

// Configuration info for datagram socket netdev.
//
// Only SocketAddress types 'unix', 'inet' and 'fd' are supported.
//
// If remote address is present and it's a multicast address, local address
// is optional. Otherwise local address is required and remote address is
// optional.
//
// .. table:: Valid parameters combination table
//
//	:widths: auto
//
//	=============  ========  =====
//	remote         local     okay?
//	=============  ========  =====
//	absent         absent    no
//	absent         not fd    no
//	absent         fd        yes
//	multicast      absent    yes
//	multicast      present   yes
//	not multicast  absent    no
//	not multicast  present   yes
//	=============  ========  =====
//
// Since: 7.2
type NetdevDgramOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// local address
	Local SocketAddress `json:"local"`
	// remote address
	Remote SocketAddress `json:"remote"`
}

// Connect to a vde switch running on the host.
//
// Since: 1.2
type NetdevVdeOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// socket path
	Sock string `json:"sock"`
	// port number
	Port int32 `json:"port"`
	// group owner of socket
	Group string `json:"group"`
	// permissions for socket
	Mode int32 `json:"mode"`
}

// Connect a host TAP network interface to a host bridge device.
//
// Since: 1.2
type NetdevBridgeOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// bridge name
	Br string `json:"br"`
	// command to execute to configure bridge
	Helper string `json:"helper"`
}

// Connect two or more net clients through a software hub.
//
// Since: 1.2
type NetdevHubPortOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// hub identifier number
	Hubid int32 `json:"hubid"`
	// used to connect hub to a netdev instead of a device (since 2.12)
	Netdev string `json:"netdev"`
}

// Connect a client to a netmap-enabled NIC or to a VALE switch port
//
// Since: 2.0
type NetdevNetmapOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// Either the name of an existing network interface supported by netmap, or
	// the name of a VALE port (created on the fly). A VALE port name is in the
	// form 'valeXXX:YYY', where XXX and YYY are non-negative integers. XXX
	// identifies a switch and YYY identifies a port of the switch. VALE ports
	// having the same XXX are therefore connected to the same switch.
	Ifname string `json:"ifname"`
	// path of the netmap device (default: '/dev/netmap').
	Devname string `json:"devname"`
}

// Vhost-user network backend
//
// Since: 2.1
type NetdevVhostUserOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// name of a unix socket chardev
	Chardev string `json:"chardev"`
	// vhost on for non-MSIX virtio guests (default: false).
	Vhostforce bool `json:"vhostforce"`
	// number of queues to be created for multiqueue vhost-user (default: 1)
	// (Since 2.5)
	Queues int32 `json:"queues"`
}

// Vhost-vdpa network backend
//
// vDPA device is a device that uses a datapath which complies with the virtio
// specifications with a vendor specific control path.
//
// Since: 5.1
type NetdevVhostVDPAOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// path of vhost-vdpa device (default:'/dev/vhost-vdpa-0')
	Vhostdev string `json:"vhostdev"`
	// file descriptor of an already opened vhost vdpa device
	Vhostfd string `json:"vhostfd"`
	// number of queues to be created for multiqueue vhost-vdpa (default: 1)
	Queues int32 `json:"queues"`
	// Start device with (experimental) shadow virtqueue. (Since 7.1) (default:
	// false). `x-svq` is experimental.
	XSvq bool `json:"x-svq"`
}

// vmnet (host mode) network backend.
//
// Allows the vmnet interface to communicate with other vmnet interfaces that
// are in host mode and also with the host.
//
// Since: 7.1
type NetdevVmnetHostOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// The starting IPv4 address to use for the interface. Must be in the private
	// IP range (RFC 1918). Must be specified along with @end-address and
	// @subnet-mask. This address is used as the gateway address. The subsequent
	// address up to and including end-address are placed in the DHCP pool.
	StartAddress string `json:"start-address"`
	// The DHCP IPv4 range end address to use for the interface. Must be in the
	// private IP range (RFC 1918). Must be specified along with @start-address
	// and @subnet-mask.
	EndAddress string `json:"end-address"`
	// The IPv4 subnet mask to use on the interface. Must be specified along with
	// @start-address and @subnet-mask.
	SubnetMask string `json:"subnet-mask"`
	// Enable isolation for this interface. Interface isolation ensures that vmnet
	// interface is not able to communicate with any other vmnet interfaces. Only
	// communication with host is allowed. Requires at least macOS Big Sur 11.0.
	Isolated bool `json:"isolated"`
	// The identifier (UUID) to uniquely identify the isolated network vmnet
	// interface should be added to. If set, no DHCP service is provided for this
	// interface and network communication is allowed only with other interfaces
	// added to this network identified by the UUID. Requires at least macOS Big
	// Sur 11.0.
	NetUuid string `json:"net-uuid"`
}

// vmnet (shared mode) network backend.
//
// Allows traffic originating from the vmnet interface to reach the Internet
// through a network address translator (NAT). The vmnet interface can
// communicate with the host and with other shared mode interfaces on the same
// subnet. If no DHCP settings, subnet mask and IPv6 prefix specified, the
// interface can communicate with any of other interfaces in shared mode.
//
// Since: 7.1
type NetdevVmnetSharedOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// The starting IPv4 address to use for the interface. Must be in the private
	// IP range (RFC 1918). Must be specified along with @end-address and
	// @subnet-mask. This address is used as the gateway address. The subsequent
	// address up to and including end-address are placed in the DHCP pool.
	StartAddress string `json:"start-address"`
	// The DHCP IPv4 range end address to use for the interface. Must be in the
	// private IP range (RFC 1918). Must be specified along with @start-address
	// and @subnet-mask.
	EndAddress string `json:"end-address"`
	// The IPv4 subnet mask to use on the interface. Must be specified along with
	// @start-address and @subnet-mask.
	SubnetMask string `json:"subnet-mask"`
	// Enable isolation for this interface. Interface isolation ensures that vmnet
	// interface is not able to communicate with any other vmnet interfaces. Only
	// communication with host is allowed. Requires at least macOS Big Sur 11.0.
	Isolated bool `json:"isolated"`
	// The IPv6 prefix to use into guest network. Must be a unique local address
	// i.e. start with fd00::/8 and have length of 64.
	Nat66Prefix string `json:"nat66-prefix"`
}

// vmnet (bridged mode) network backend.
//
// Bridges the vmnet interface with a physical network interface.
//
// Since: 7.1
type NetdevVmnetBridgedOptions struct {
	// identifier for monitor commands.
	Id string `json:"id"`
	// Specify the driver used for interpreting remaining arguments.
	Type NetClientDriver `json:"type"`
	// The name of the physical interface to be bridged.
	Ifname string `json:"ifname"`
	// Enable isolation for this interface. Interface isolation ensures that vmnet
	// interface is not able to communicate with any other vmnet interfaces. Only
	// communication with host is allowed. Requires at least macOS Big Sur 11.0.
	Isolated bool `json:"isolated"`
}

type NetdevAddLegacyNicRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetLegacyNicOptions `json:"arguments"`
}

type NetdevAddDevUserRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevUserOptions `json:"arguments"`
}

type NetdevAddDevTapRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevTapOptions `json:"arguments"`
}

type NetdevAddDevL2TPv3Request struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevL2TPv3Options `json:"arguments"`
}

type NetdevAddDevSocketRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevSocketOptions `json:"arguments"`
}

type NetdevAddDevStreamRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevStreamOptions `json:"arguments"`
}

type NetdevAddDevDgramRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevDgramOptions `json:"arguments"`
}

type NetdevAddDevVdeRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevVdeOptions `json:"arguments"`
}

type NetdevAddDevBridgeRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevBridgeOptions `json:"arguments"`
}

type NetdevAddDevHubPortRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevHubPortOptions `json:"arguments"`
}

type NetdevAddDevNetmapRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevNetmapOptions `json:"arguments"`
}

type NetdevAddDevVhostUserRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevVhostUserOptions `json:"arguments"`
}

type NetdevAddDevVhostVDPARequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevVhostVDPAOptions `json:"arguments"`
}

type NetdevAddDevVmnetHostRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevVmnetHostOptions `json:"arguments"`
}

type NetdevAddDevVmnetSharedRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevVmnetSharedOptions `json:"arguments"`
}

type NetdevAddDevVmnetBridgedRequest struct {
	Execute string `json:"execute" default:"netdev_add"`

	Arguments NetdevVmnetBridgedOptions `json:"arguments"`
}

type NetdevDelRequest struct {
	Execute string `json:"execute" default:"netdev_del"`

	Arguments NetdevDelRequestArguments `json:"arguments"`
}

type NetdevDelRequestArguments struct {
	Id string `json:"id"`
}

type QueryRxFilterRequest struct {
	Execute string `json:"execute" default:"query-rx-filter"`

	Arguments QueryRxFilterRequestArguments `json:"arguments"`
}

type QueryRxFilterRequestArguments struct {
	Name string `json:"name"`
}

// Rx-filter information for a NIC.
type QueryRxFilterResponse struct {
	// net client name
	Name string `json:"name"`
	// whether promiscuous mode is enabled
	Promiscuous bool `json:"promiscuous"`
	// multicast receive state
	Multicast RxState `json:"multicast"`
	// unicast receive state
	Unicast RxState `json:"unicast"`
	// vlan receive state (Since 2.0)
	Vlan RxState `json:"vlan"`
	// whether to receive broadcast
	BroadcastAllowed bool `json:"broadcast-allowed"`
	// multicast table is overflowed or not
	MulticastOverflow bool `json:"multicast-overflow"`
	// unicast table is overflowed or not
	UnicastOverflow bool `json:"unicast-overflow"`
	// the main macaddr string
	MainMac string `json:"main-mac"`
	// a list of active vlan id
	VlanTable []int32 `json:"vlan-table"`
	// a list of unicast macaddr string
	UnicastTable []string `json:"unicast-table"`
	// a list of multicast macaddr string
	MulticastTable []string `json:"multicast-table"`
}
