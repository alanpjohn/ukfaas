// Code generated by kraftkit.sh/tools/protoc-gen-go-netconn. DO NOT EDIT.
// source: machine/qemu/qmp/v1alpha/sockets.proto

package qmpv1alpha

// Available SocketAddress types
//
// Since: 2.9
type SocketAddressType string

const (
	// Internet address
	SOCKET_ADDRESS_TYPE_INET = SocketAddressType("inet")
	// Unix domain socket
	SOCKET_ADDRESS_TYPE_UNIX = SocketAddressType("unix")
	// VMCI address
	SOCKET_ADDRESS_TYPE_VSOCK = SocketAddressType("vsock")
	// decimal is for file descriptor number, otherwise a file descriptor name.
	// Named file descriptors are permitted in monitor commands, in combination
	// with the 'getfd' command. Decimal file descriptors are permitted at startup
	// or other contexts where no monitor context is active.
	SOCKET_ADDRESS_TYPE_FD = SocketAddressType("fd")
)

func (e SocketAddressType) String() string {
	return string(e)
}

func SocketAddressTypes() []SocketAddressType {
	return []SocketAddressType{
		SOCKET_ADDRESS_TYPE_INET,
		SOCKET_ADDRESS_TYPE_UNIX,
		SOCKET_ADDRESS_TYPE_VSOCK,
		SOCKET_ADDRESS_TYPE_FD,
	}
}

// Captures a socket address or address range in the Internet
// namespace.
//
// Since: 1.3
type InetSocketAddress struct {
	// host part of the address
	Host string `json:"host"`
	// port part of the address
	Port string `json:"port"`
	// true if the host/port are guaranteed to be numeric, false if name
	// resolution should be attempted.  Defaults to false. (Since 2.9)
	Numeric bool `json:"numeric"`
	// If present, this is range of possible addresses, with port between `port`
	// and `to`.
	To int32 `json:"to"`
	// whether to accept IPv4 addresses, default try both IPv4 and IPv6
	Ipv4 bool `json:"ipv4"`
	// whether to accept IPv6 addresses, default try both IPv4 and IPv6
	Ipv6 bool `json:"ipv6"`
	// enable keep-alive when connecting to this socket.  Not supported for
	// passive sockets.  (Since 4.2)
	KeepAlive bool `json:"keep-alive"`
	// enable multi-path TCP. (Since 6.1)
	Mptcp bool `json:"mptcp"`
}

// Captures a socket address in the local ("Unix socket") namespace.
//
// Since: 1.3
type UnixSocketAddress struct {
	// filesystem path to use
	Path string `json:"path"`
	// if true, this is a Linux abstract socket address.  `path` will be prefixed
	// by a null byte, and optionally padded with null bytes.  Defaults to false.
	// (Since 5.1)
	Abstract bool `json:"abstract"`
	// if false, pad an abstract socket address with enough null bytes to make it
	// fill struct sockaddr_un member sun_path. Defaults to true.  (Since 5.1)
	Tight bool `json:"tight"`
}

// Captures a socket address in the vsock namespace.
//
// Note: string types are used to allow for possible future hostname or
//
//	service resolution support.
//
// Since: 2.8
type VsockSocketAddress struct {
	// unique host identifier
	Cid string `json:"cid"`
	// port
	Port string `json:"port"`
}

// Captures the address of a socket, which could also be a named file
// descriptor
//
// Since: 2.9
type SocketAddress struct {
	Type  SocketAddressType  `json:"type"`
	Inet  InetSocketAddress  `json:"inet"`
	Unix  UnixSocketAddress  `json:"unix"`
	Vsock VsockSocketAddress `json:"vsock"`
	Fd    string             `json:"fd"`
}
